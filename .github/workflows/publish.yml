env:
  # Share build artifacts across all crates (frontend + src-tauri)
  CARGO_TARGET_DIR: ${{ github.workspace }}/target

  # Compiler cache for both native and wasm targets
  RUSTC_WRAPPER: sccache
  SCCACHE_GHA_ENABLED: "true"
  SCCACHE_CACHE_SIZE: "10G"
  CARGO_INCREMENTAL: "0"

  # Pin versions 
  TRUNK_VERSION: "0.21.14"
  STYLANCE_VERSION: "0.7.0"

name: 'publish'

on:
  push:
    tags:
    - 'v*'  # Triggers when a tag like v1.0.0 is pushed
  workflow_dispatch:

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    environment: .env
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          cache: "pip"
          cache-dependency-path: requirements-ci.txt

      - name: Install Meson and Ninja
        run: python -m pip install -r requirements-ci.txt

      - name: 'Set env CI to true'
        if: matrix.platform == 'macos-latest'
        shell: "bash"
        run: export CI=true
        
      # Rust toolchain + wasm target for Leptos
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-unknown-unknown

      # Cache Cargo registries/git + target/ for both:
      # - workspace root (frontend)
      # - src-tauri crate (if it has its own Cargo.toml/Cargo.lock)
      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            frontend -> target
            frontend/src-tauri -> target
          prefix-key: v1-tauri-leptos
          cache-on-failure: true


      # Compiler cache across clean runners
      - name: sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      # MSVC environment for Windows builds (needed for Tauri native)
      - name: Set up MSVC (Windows)
        if: startsWith(runner.os, 'Windows')
        uses: ilammy/msvc-dev-cmd@v1

      # Cache Cargo home (binaries + registry + git), keyed by tool versions
      - name: Cache cargo home
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin
          key: ${{ runner.os }}-cargo-tools-trunk-${{ env.TRUNK_VERSION }}-stylance-${{ env.STYLANCE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-cargo-tools-

        # Fast installer for Rust binaries (downloads prebuilt if available)
      - name: Install cargo-binstall
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-binstall
  
        # Install tools (prefer prebuilt; fall back to cargo install if needed)
      - name: Install trunk and stylance (fast)
        shell: bash
        run: |
          set -euxo pipefail
          cargo binstall -y "trunk@${TRUNK_VERSION}" || \
            cargo install --locked --version "${TRUNK_VERSION}" trunk
          cargo binstall -y "stylance-cli@${STYLANCE_VERSION}" || \
            cargo install --locked --version "${STYLANCE_VERSION}" stylance-cli

      - name: App directory
        run: cd frontend

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref }} # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: ${{ github.ref }}
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          includeUpdaterJson: true
          args: ${{ matrix.args }}

  # publish-backend:
  #   permissions:
  #     contents: write
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - platform: 'windows-latest'
  #           args: ''

  #   runs-on: ${{ matrix.platform }}
  #   environment: .env
  #   steps:
  #     - uses: actions/checkout@v4
        
  #     - name: install Rust nightly
  #       run: |
  #         rustup toolchain install nightly
  #         rustup default nightly

  #     - name: Cargo build
  #       env:
  #         LIB: 'C:\Program Files\PostgreSQL\17\lib'
  #         INCLUDE: 'C:\Program Files\PostgreSQL\17\include'
  #       run: |
  #         cd backend
  #         cargo build --release ${{ matrix.args }}

  #     - name: Upload binaries to release
  #       uses: svenstaro/upload-release-action@v2
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         file: target/release/backend.exe
  #         asset_name: backend-${{ matrix.platform }}.exe
  #         tag: ${{ github.ref }}
  #         overwrite: true
  #         draft: true
  #         prerelease: false
  #         body: 'See the assets to download this version and install.'


